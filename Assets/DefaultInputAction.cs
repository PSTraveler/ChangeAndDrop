//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/DefaultInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultInputAction"",
    ""maps"": [
        {
            ""name"": ""UITouch"",
            ""id"": ""29c12b58-9b0b-44f3-97f7-01c964655a1b"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""0623ff0f-6ff1-41b8-a9fc-8fe20c5488d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Slide"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dbf860d2-961d-433e-a4dc-dc022948754a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17c4ff5b-7416-4ce3-b622-8b0d85913d97"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fce6ecf-1648-45ca-8d51-4f9c27b32d55"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff15a2f1-9366-4d73-a2f0-8a6beac39e64"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01c77208-9c6f-4b11-b00d-0fa2709df489"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UITouch
        m_UITouch = asset.FindActionMap("UITouch", throwIfNotFound: true);
        m_UITouch_Touch = m_UITouch.FindAction("Touch", throwIfNotFound: true);
        m_UITouch_Slide = m_UITouch.FindAction("Slide", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UITouch
    private readonly InputActionMap m_UITouch;
    private List<IUITouchActions> m_UITouchActionsCallbackInterfaces = new List<IUITouchActions>();
    private readonly InputAction m_UITouch_Touch;
    private readonly InputAction m_UITouch_Slide;
    public struct UITouchActions
    {
        private @DefaultInputAction m_Wrapper;
        public UITouchActions(@DefaultInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_UITouch_Touch;
        public InputAction @Slide => m_Wrapper.m_UITouch_Slide;
        public InputActionMap Get() { return m_Wrapper.m_UITouch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UITouchActions set) { return set.Get(); }
        public void AddCallbacks(IUITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_UITouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UITouchActionsCallbackInterfaces.Add(instance);
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
            @Slide.started += instance.OnSlide;
            @Slide.performed += instance.OnSlide;
            @Slide.canceled += instance.OnSlide;
        }

        private void UnregisterCallbacks(IUITouchActions instance)
        {
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
            @Slide.started -= instance.OnSlide;
            @Slide.performed -= instance.OnSlide;
            @Slide.canceled -= instance.OnSlide;
        }

        public void RemoveCallbacks(IUITouchActions instance)
        {
            if (m_Wrapper.m_UITouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_UITouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UITouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UITouchActions @UITouch => new UITouchActions(this);
    public interface IUITouchActions
    {
        void OnTouch(InputAction.CallbackContext context);
        void OnSlide(InputAction.CallbackContext context);
    }
}
